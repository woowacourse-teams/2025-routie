name: Setup Opened Issues

on:
  issues:
    types: [ opened, reopened ]

jobs:
  setup_issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Set Assignees
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, repository } = context.payload;
            const author = issue.user.login;

            await github.rest.issues.addAssignees({
              owner: repository.owner.login,
              repo: repository.name,
              issue_number: issue.number,
              assignees: [author],
            });

      - name: Set Labels
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, repository } = context.payload;
            
            const labels = [];
            // author 기반 라벨 추가
            const feTeam = ['ohgus', 'AHHYUNJU', 'aydenote', 'jeongyou'];
            const beTeam = ['threepebbles', 'goohong', 'cookie-meringue', 'DongchannN'];
            
            const author = issue.user.login;
            const authorLabel = feTeam.includes(author) ? 'frontend' : beTeam.includes(author) ? 'backend' : null;
            if (authorLabel) labels.push(authorLabel);

            if (labels.length) {
              await github.rest.issues.addLabels({
                owner: repository.owner.login,
                repo: repository.name,
                issue_number: issue.number,
                labels,
              });
            }

      - name: Set Projects
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_V2_TOKEN }}
          script: |
            // GitHub Actions에서 전달 받은 Issue 정보
            const { issue } = context.payload;
            
            // Project v2 ID
            const projectNodeId = 'PVT_kwDOA_44FM4A9rer';
            
            const fieldData = await github.graphql(`
              query {
                node(id: "${projectNodeId}") {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        __typename
            
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
            
                        ... on ProjectV2SingleSelectField {
                          options {
                            id
                            name
                          }
                        }
            
                        ... on ProjectV2IterationField {
                          configuration {
                            __typename
                            ... on ProjectV2IterationFieldConfiguration {
                              iterations {
                                id
                                startDate
                                duration
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `);

            const fields = fieldData.node.fields.nodes;
            
            // 1. Issue를 Project 아이템으로 추가
            const addItemResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `, {
              projectId: projectNodeId,
              contentId: issue.node_id,
            });

            // 2. Status 필드 Todo로 설정
            const itemId = addItemResponse.addProjectV2ItemById.item.id;
            const statusField = fields.find(f =>
              f.__typename === 'ProjectV2SingleSelectField' &&
              f.name?.toLowerCase() === 'status'
            );
            const statusFieldId = statusField?.id;
            const todoOptionId = statusField?.options?.find(o => o.name.toLowerCase() === 'todo')?.id;
            
            if (statusFieldId && todoOptionId) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId: projectNodeId,
                itemId,
                fieldId: statusFieldId,
                optionId: todoOptionId,
              });
            }

            // 3. Start Date을 today로 설정
            const startDateField = fields.find(f =>
              f.__typename === 'ProjectV2Field' &&
              f.name?.toLowerCase() === 'start date'
            );
            const startDateFieldId = startDateField?.id;
            
            const today = new Date();
            const todayISOString = today.toISOString().split('T')[0];
            
            if (startDateFieldId) {
              await github.graphql(`
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectNodeId}",
                    itemId: "${itemId}",
                    fieldId: "${startDateFieldId}",
                    value: { date: "${todayISOString}" }
                  }) {
                    projectV2Item { id }
                  }
                }
              `);
            }
            
            // 4. iteration 설정
            const iterationField = fields.find(f =>
              f.__typename === 'ProjectV2IterationField' &&
              f.configuration?.__typename === 'ProjectV2IterationFieldConfiguration'
            );
            const iterationFieldId = iterationField?.id;
            const iterations = iterationField?.configuration?.iterations ?? [];

            // 오늘이 포함된 iteration 찾기
            function isDateInRange(start, durationDays) {
              const startDate = new Date(start);
              const endDate = new Date(startDate);
              endDate.setDate(endDate.getDate() + durationDays);
              return today >= startDate && today < endDate;
            }

            const matchingIteration = iterations.find(i => isDateInRange(i.startDate, i.duration));

            if (iterationFieldId && matchingIteration) {
              await github.graphql(`
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectNodeId}",
                    itemId: "${itemId}",
                    fieldId: "${iterationFieldId}",
                    value: {
                      iterationId: "${matchingIteration.id}"
                    }
                  }) {
                    projectV2Item { id }
                  }
                }
              `);
            }
            
            // 5. Issue title 기반 Hierarchy 필드 설정
            const hierarchyField = fields.find(f =>
              f.__typename === 'ProjectV2SingleSelectField' &&
              f.name?.toLowerCase() === 'hierarchy'
            );
            const hierarchyFieldId = hierarchyField?.id;
            
            const title = issue.title;
            const titleMap = {
              '[EPIC]': 'epic',
              '[STORY]': 'story',
              '[TASK]': 'task'
            };
            const prefix = Object.keys(titleMap).find(p => title.startsWith(p));
            if(prefix) {
              const taskOptionId = hierarchyField?.options?.find(o => o.name.toLowerCase() === titleMap[prefix])?.id;
              if (hierarchyFieldId && taskOptionId) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { singleSelectOptionId: $optionId }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: projectNodeId,
                  itemId,
                  fieldId: hierarchyFieldId,
                  optionId: taskOptionId,
                });
              }
            }
