name: Setup Opened PRs

on:
  pull_request:
    types: [ opened, reopened ]

jobs:

  setup_pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write

    steps:
      - name: Set assignees
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const author = pr.user.login;

            await github.rest.issues.addAssignees({
              owner: repository.owner.login,
              repo: repository.name,
              issue_number: pr.number,
              assignees: [author],
            });

      - name: Set reviewers
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const author = pr.user.login;

            const feTeam = ['ohgus', 'AHHYUNJU', 'aydenote', 'jeongyou'];
            const beTeam = ['threepebbles', 'goohong', 'cookie-meringue', 'DongchannN'];

            const isAuthorFE = feTeam.includes(author);
            const isAuthorBE = beTeam.includes(author);
            const reviewers = (isAuthorFE ? feTeam : isAuthorBE ? beTeam : []).filter(r => r !== author);

            if (reviewers.length) {
              await github.rest.pulls.requestReviewers({
                owner: repository.owner.login,
                repo: repository.name,
                pull_number: pr.number,
                reviewers,
              });
            }

      - name: Set labels
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;

            const labels = [];

            // 1. PR 제목 prefix 기반 라벨 추가
            const title = pr.title.toLowerCase();
            const titleLabelMap = {
                'feat': 'feature',
                'fix': 'fix',
                'docs': 'docs',
                'style': 'style',
                'refactor': 'refactor',
                'test': 'test',
                'chore': 'chore',
            };
            const titlePrefix = Object.keys(titleLabelMap).find(prefix => title.startsWith(prefix + ':'));
            if (titlePrefix) labels.push(titleLabelMap[titlePrefix]);

            // 2. author 기반 라벨 추가
            const feTeam = ['ohgus', 'AHHYUNJU', 'aydenote', 'jeongyou'];
            const beTeam = ['threepebbles', 'goohong', 'cookie-meringue', 'DongchannN'];

            const author = pr.user.login;
            const authorLabel = feTeam.includes(author) ? 'frontend' : beTeam.includes(author) ? 'backend' : null;
            if (authorLabel) labels.push(authorLabel);

            if (labels.length) {
              await github.rest.issues.addLabels({
                owner: repository.owner.login,
                repo: repository.name,
                issue_number: pr.number,
                labels,
              });
            }

      - name: Notify Discord based on PR label
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
          WEBHOOK_BACKEND: ${{ secrets.DISCORD_WEBHOOK_BACKEND }}
          WEBHOOK_FRONTEND: ${{ secrets.DISCORD_WEBHOOK_FRONTEND }}
        run: |
          OWNER=$(echo "$REPO" | cut -d'/' -f1)
          REPO_NAME=$(echo "$REPO" | cut -d'/' -f2)

          LABELS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$OWNER/$REPO_NAME/issues/$PR_NUMBER" \
            | jq -r '.labels[].name')

          for LABEL in $LABELS; do
            case "$LABEL" in
              "backend")
                WEBHOOK_URL="$WEBHOOK_BACKEND"
                ;;
              "frontend")
                WEBHOOK_URL="$WEBHOOK_FRONTEND"
                ;;
              *)
                continue
                ;;
            esac

            MESSAGE="$PR_URL"
            if [ -z "$WEBHOOK_URL" ]; then
              echo "Webhook URL not set for label $LABEL. Skipping."
              continue
            fi

            if [ -z "$MESSAGE" ]; then
              echo "Message is empty. Skipping."
              continue
            fi

            PAYLOAD=$(jq -n --arg content "$MESSAGE" '{content: $content}')
            curl --fail -H "Content-Type: application/json" \
              -X POST \
              -d "$PAYLOAD" \
              "$WEBHOOK_URL"
          done

      - name: Set Projects
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_V2_TOKEN }}
          script: |
            // GitHub Actions에서 전달 받은 PR 정보
            const { pull_request: pr } = context.payload;

            // Project v2 ID
            const projectNodeId = 'PVT_kwDOA_44FM4A9rer';

            const fieldData = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        __typename

                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }

                        ... on ProjectV2SingleSelectField {
                          options {
                            id
                            name
                          }
                        }

                        ... on ProjectV2IterationField {
                          configuration {
                            __typename
                            ... on ProjectV2IterationFieldConfiguration {
                              iterations {
                                id
                                startDate
                                duration
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, {
              projectId: projectNodeId,
            });

            const fields = fieldData.node.fields.nodes;

            // 1. Issue를 Project 아이템으로 추가
            const addItemResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `, {
              projectId: projectNodeId,
              contentId: pr.node_id,
            });

            // 2. Status 필드 In Progress로 설정
            const itemId = addItemResponse.addProjectV2ItemById.item.id;
            const statusField = fields.find(f =>
              f.__typename === 'ProjectV2SingleSelectField' &&
              f.name?.toLowerCase() === 'status'
            );
            const statusFieldId = statusField?.id;
            const inProgressOptionId = statusField?.options?.find(o => o.name.toLowerCase() === 'in progress')?.id;

            if (statusFieldId && inProgressOptionId) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId: projectNodeId,
                itemId,
                fieldId: statusFieldId,
                optionId: inProgressOptionId,
              });
            }

            // 3. Start Date을 today로 설정
            const startDateField = fields.find(f =>
              f.name?.toLowerCase() === 'start date'
            );
            const startDateFieldId = startDateField?.id;

            const today = new Date();
            const todayISOString = today.toISOString().split('T')[0];

            if (startDateFieldId) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $date: Date!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { date: $date }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId: projectNodeId,
                itemId,
                fieldId: startDateFieldId,
                date: todayISOString,
              });
            }

            // 4. iteration 설정
            const iterationField = fields.find(f =>
              f.__typename === 'ProjectV2IterationField' &&
              f.configuration?.__typename === 'ProjectV2IterationFieldConfiguration'
            );
            const iterationFieldId = iterationField?.id;
            const iterations = iterationField?.configuration?.iterations ?? [];

            // 오늘이 포함된 iteration 찾기
            function isDateInRange(start, durationDays) {
              const startDate = new Date(start);
              const endDate = new Date(startDate);
              endDate.setDate(endDate.getDate() + durationDays);
              return today >= startDate && today < endDate;
            }

            const matchingIteration = iterations.find(i => isDateInRange(i.startDate, i.duration));

            if (iterationFieldId && matchingIteration) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $iterationId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: {
                      iterationId: $iterationId
                    }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId: projectNodeId,
                itemId,
                fieldId: iterationFieldId,
                iterationId: matchingIteration.id,
              });
            }

            // 5. Hierarchy 필드 task로 설정
            const hierarchyField = fields.find(f =>
              f.__typename === 'ProjectV2SingleSelectField' &&
              f.name?.toLowerCase() === 'hierarchy'
            );

            const hierarchyFieldId = hierarchyField?.id;
            const taskOptionId = hierarchyField?.options?.find(o => o.name.toLowerCase() === 'task')?.id;

            if (hierarchyFieldId && taskOptionId) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId: projectNodeId,
                itemId,
                fieldId: hierarchyFieldId,
                optionId: taskOptionId,
              });
            }
