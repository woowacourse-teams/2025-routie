name: Backend CD on develop branch

on:
  push:
    branches: [ "develop" ]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  build-and-upload:
    name: Build and Upload JAR
    runs-on: ubuntu-latest

    permissions:
      actions: write
      contents: read

    defaults:
      run:
        working-directory: backend/spring-routie

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Test with Gradle
        run: ./gradlew test
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: BootJar with Gradle
        run: ./gradlew bootJar

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: backend/spring-routie/build/libs/

  download-and-deploy:
    name: Deploy to EC2
    runs-on: [ self-hosted, dev ]
    needs: build-and-upload

    defaults:
      run:
        working-directory: backend/spring-routie

    steps:
      - name: Restore docker-compose.yml and Run Containers
        run: |
          echo '${{ secrets.DOCKER_COMPOSE_YML_DEV }}' > docker-compose.yml
          sudo docker compose up -d

      - name: Clean old JARs
        run: rm -f build/libs/*.jar

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: backend/spring-routie/build/libs

      - name: Restore application.yml
        run: |
          mkdir -p config
          echo '${{ secrets.APPLICATION_YML_DEV }}' > config/application.yml

      - name: Kill existing Spring Process
        run: |
          PID=$(sudo lsof -ti:8080 || true)
          if [ -n "$PID" ]; then
            echo "Killing process on port 8080: $PID"
            sudo kill -9 "$PID"
          else
            echo "No process found on port 8080"
          fi

      - name: Start Spring Boot Application with external config
        run: |
          JAR_NAME=$(ls build/libs/*.jar 2>/dev/null | head -n 1)
          if [ -z "$JAR_NAME" ]; then
            echo "No JAR file found. Deployment aborted."
            exit 1
          fi
          echo "Starting $JAR_NAME"
          sudo nohup java \
            -Djava.net.preferIPv4Stack=true \
            -jar "$JAR_NAME" \
            --spring.profiles.active=dev \
            --server.port=8080 \
            --spring.config.location=./config/application.yml > app.log 2>&1 &
